// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name     String
  email    String @unique
  password String

  employee Employee?

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Employee {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  hire_date     DateTime
  employee_type EmployeeType

  division_id Int
  division    Division @relation(fields: [division_id], references: [id], onDelete: Cascade)

  district_id Int
  district    District @relation(fields: [district_id], references: [id], onDelete: Cascade)

  region_id Int
  region    Region @relation(fields: [region_id], references: [id], onDelete: Cascade)

  user_id Int       @unique
  user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  leave   Leave[]
  Comment Comment[]

  @@map("employees")
}

model Role {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name         String
  access_level Int
  User         User[]
}

model Division {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name String

  Region     Region[]
  employee   Employee[]
  department Department[]
  Holiday    Holiday[]
}

model Region {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name String

  division_id Int
  division    Division @relation(fields: [division_id], references: [id], onDelete: Cascade)

  district District[]
  employee Employee[]
}

model Department {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name String

  division_id Int
  division    Division @relation(fields: [division_id], references: [id], onDelete: Cascade)
}

model District {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name String

  region_id Int
  region    Region     @relation(fields: [region_id], references: [id], onDelete: Cascade)
  Employee  Employee[]
}

model Leave {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  no_of_days Int
  leave_type LeaveType
  status     LeaveStatus @default(STARTED)
  start_date DateTime
  end_date   DateTime?

  employee_id Int
  employee    Employee    @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  comment     Comment[]
  leaveDays   LeaveDays[]
}

model LeaveDays {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  start_date DateTime
  end_date   DateTime
  no_of_days Int

  leave_id Int
  leave    Leave @relation(fields: [leave_id], references: [id], onDelete: Cascade)
}

model Comment {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  body String

  leave_id Int
  leave    Leave @relation(fields: [leave_id], references: [id], onDelete: Cascade)

  employee_id Int
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}

model Holiday {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  holiday DateTime

  division_id Int
  division    Division @relation(fields: [division_id], references: [id], onDelete: Cascade)
}

enum EmployeeType {
  JUNIOR
  SENIOR
}

enum LeaveType {
  ANNUAL
  CASUAL
  PART
  MATERNITY
  SICK
}

enum LeaveStatus {
  STARTED
  HOD_APPROVE
  SCHEDULE_OFFICER_REVIEWS
  DIRECTOR_APPROVE
}
